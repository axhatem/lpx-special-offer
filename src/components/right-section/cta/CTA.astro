<script>
  (function setGlowEffectRx() {
    const glowEffects = document.querySelectorAll(".glow-effect");

    glowEffects.forEach((glowEffect) => {
      const glowLines = glowEffect.querySelectorAll("rect");
      const rx = getComputedStyle(glowEffect).borderRadius;

      glowLines.forEach((line) => {
        line.setAttribute("rx", rx);
      });
    });
  })();
</script>

<a href="https://google.fr" class="button glow-effect" data-glow-offset="true">
  <span class="main">J'OBTIENS UNE LANDING PAGE PERFORMANTE</span><span
    class="secondary">Je n'accepte ton projet que s'il a du potentiel.</span
  >
  <svg class="glow-container">
    <rect pathLength="100" stroke-linecap="round" class="glow-blur"></rect>
    <rect pathLength="100" stroke-linecap="round" class="glow-line"></rect>
  </svg>
</a>

<style>
  .button {
    height: 100px;
    text-decoration: none;
    color: #fff;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 0.75rem;
    text-align: center;
    border-radius: 25px;
    border: 1px solid #f2f5fa;
    background: #9b0c3e;
    box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);
  }

  .main {
    text-decoration: underline;
    text-align: center;
    font-size: 1.2rem;
    font-weight: 700;
  }

  .secondary {
    font-size: 0.75rem;
    font-weight: 300;
  }

  .glow-effect {
    --glow-line-color: #9b0c3e;
    --glow-line-thickness: 2px;
    --glow-line-length: 20px;
    --glow-blur-color: #9b0c3e;
    --glow-blur-size: 5px;
    --glow-offset: 0px;
    --animation-speed: 1200ms;
    /* do not change, used for calculations */
    --container-offset: 100px;
    position: relative;
  }

  .glow-container {
    pointer-events: none;
    position: absolute;
    inset: calc(var(--container-offset) / -2);
    width: calc(100% + var(--container-offset));
    height: calc(100% + var(--container-offset));
    opacity: 0;
    /* outline: 3px solid blue; */
  }

  .glow-blur,
  .glow-line {
    width: calc(100% - var(--container-offset) + var(--glow-offset));
    height: calc(100% - var(--container-offset) + var(--glow-offset));
    x: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
    y: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
    rx: 1.25rem;
    fill: transparent;
    stroke: black;
    stroke-width: 5px;
    stroke-dasharray: var(--glow-line-length)
      calc(50px - var(--glow-line-length));
  }

  .glow-effect:is(:hover, :focus) :is(.glow-line, .glow-blur) {
    stroke-dashoffset: -80px;
    transition: stroke-dashoffset var(--animation-speed) ease-in;
  }

  .glow-line {
    stroke: var(--glow-line-color);
    stroke-width: var(--glow-line-thickness);
  }

  .glow-blur {
    filter: blur(var(--glow-blur-size));
    stroke: var(--glow-blur-color);
    stroke-width: var(--glow-blur-size);
  }

  .glow-effect:is(:hover, :focus) .glow-container {
    animation: glow-visibility ease-in-out var(--animation-speed);
  }

  @keyframes glow-visibility {
    0%,
    100% {
      opacity: 0;
    }
    25%,
    75% {
      opacity: 1;
    }
  }

  .glow-effect[data-glow-animation="false"] {
    --glow-line-length: 50px;
  }
  .glow-effect[data-glow-offset="true"] {
    --glow-offset: 10px;
  }

  .glow-effect[data-glow-animation="grow"]:is(:hover, :focus) .glow-container {
    scale: 1.3;
    transition: scale var(--animation-speed) linear;
  }

  @media only screen and (hover: none) and (pointer: coarse) {
    .glow-effect:is(:hover, :focus) :is(.glow-line, .glow-blur) {
      stroke-dashoffset: 0;
      transition: none;
    }

    .glow-effect:is(:hover, :focus) .glow-container {
      animation: none;
    }

    .glow-effect[data-glow-animation="grow"]:is(:hover, :focus)
      .glow-container {
      scale: 1;
      transition: none;
    }
  }
</style>
